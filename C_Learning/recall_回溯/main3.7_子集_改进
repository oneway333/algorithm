/*
 *
3.7 子集
给你一个整数数组nums，数组中的元素互不相同。输出该数组所有可能的子集（幂集）。解集不能包含重复的子集。你可以按任意顺序输出解集。

 输入：nums = [0]
输出：[[], [0]]
输入：nums = [1,2,3]
输出：[[], [1], [2], [1,2], [3], [1,3], [2,3], [1,2,3]]
 */

#include <stdio.h>

#define N 500

int path[N];

void sort(int a[], int n) {
    for (int i = 0; i < n - 1; ++i)
        for (int j = 0; j < n - i - 1; ++j)
            if (a[j] > a[j + 1]){
                int t = a[j];
                a[j] = a[j + 1];
                a[j + 1] = t;
            }
}

void subSet(int nums[], int n, int k, int begin){
    if (k > n) return;
    if (k == 0) printf("[]");
    else{
        printf("[");
        for (int i = 0; i < k - 1; i++) printf("%d,", path[i]);
        printf("%d]", path[k - 1]);
    }
    putchar('\n');
    for (int i = begin; i < n; ++i) {
        path[k] = nums[i];
        subSet(nums, n, k + 1, i + 1);
    }
}

int main() {
    int nums1[] = {0}, n1 = 1;
    int nums2[] = {1, 2, 3}, n2 = 3;
    sort(nums1, n1);
    sort(nums2, n2);

    subSet(nums1, n1, 0, 0);
    subSet(nums2, n2, 0, 0);
    return 0;
}