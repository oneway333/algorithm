/*
 *
3.8 最长公共子序列
有两个序列X和Y，若X有一个子序列（不要求位置连续）Z，同时Z也是Y的子序列。那么Z叫做X与Y的公共子序列，求X与Y的最长公共子序列的长度。
输入：X = [2, 0, 3, 9, 4, 1, 2, 7], Y = [8, 3, 2, 4, 3, 1, 5, 7, 9]
输出：4
输入：X = [3, 7, 4, 1, 7, 3, 7}，{7,4,1,7,3,7,7}
输出：6

 */

#include <stdio.h>

#define N 50

int max(int a, int b){
    return a > b ? a : b;
}

int seq(int x[], int y[], int m, int n){
    //初始化最后一行，最后一列
    int dp[N][N] = {0};
    for(int i = n - 1, t = 0; i >= 0; i--){
        if (y[i] == x[m - 1]) t = 1;
        dp[m - 1][i] = t;
    }
    for (int i = m - 1, t = 0; i >= 0; i--) {
        if (x[i] == y[n - 1]) t = 1;
        dp[i][n - 1] = t;
    }
    for (int i = m - 2; i >= 0; i--)
        for (int j = n - 2; j >= 0; j--){
            if (x[i] == y[j]) dp[i][j] = dp[i + 1][j + 1] + 1;
            else dp[i][j] = max(dp[i + 1][j], dp[i][j + 1]);
        }
    return dp[0][0];
}

int main() {

    int x1[] = {2, 0, 3, 9, 4, 1, 2, 7}, y1[] = {8, 3, 2, 4, 3, 1, 5, 7, 9}, m1 = sizeof(x1) / sizeof(int), n1 = sizeof(y1) / sizeof(int);
    int x2[] = {3, 7, 4, 1, 7, 3, 7}, y2[] = {7, 4, 1, 7, 3, 7, 7}, m2 = sizeof(x2) / sizeof(int), n2 = sizeof(y2) / sizeof(int);
    printf("%d\n", seq(x1, y1, m1, n1));
    printf("%d\n", seq(x2, y2, m2, n2));
    return 0;

}