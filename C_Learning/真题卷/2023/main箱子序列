/*
 *
 * 2.箱⼦序列
 * 有n个⻓⽅体箱⼦，现要实现将箱⼦a嵌套装⼊箱⼦b中，
箱⼦可以旋转但是开⼝必须朝上，你的任务是
选出尽可能多的箱⼦排成⼀⾏，使得前⼀个箱⼦可以被嵌套在后⼀个箱⼦⾥⾯。⾸先输⼊⼀个正整数n，然后接着输⼊n⾏，每⾏包括三个正整数分别表示矩形的⻓，宽，
⾼。输出⼀个正整数表示最⻓序列的⻓度。

 *
 *
 *
 */

#include <stdio.h>

#define N 50

typedef struct {
    int a, b, c; // a 长 b 宽 c 高
} Cube;

// c1表示前一个，c2表示后一个
int isContain(Cube c1, Cube c2){
    if (c1.a < c2.a && c1.b < c2.b && c1.c < c2.c) return 1;
    return 0;
}

int seq(Cube cube[], int n){
    int dp[N] = {0}, max = 1;
    dp[n - 1] = 1;
    for (int i = n - 2; i >= 0; i--){
        // 每次寻找之前符合条件，并且最大的那个
        int m = 0;
        for (int j = i + 1; j < n; j++){
            if (isContain(cube[i], cube[j]))
                m = m > dp[j] ? m : dp[j];
        }
        dp[i] = m + 1;
        max = max > dp[i] ? max : dp[i];
    }
    return max;
}

// 最长不连续子序列变种
int main(){
    int n;
    Cube cube[N] = {0};
    scanf("%d", &n);
    for (int i = 0; i < n; i++)
        scanf("%d %d %d", &cube[i].a, &cube[i].b, &cube[i].c);
    printf("max length is %d\n", seq(cube, n));
    return 0;
}