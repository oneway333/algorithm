/*
 *
 * data.txt⽂件中含有若⼲个学校不同学⽣的程序设计竞赛的成绩，先要求选取每个学校的前三名学⽣的成绩之和作为学校的分数参加评⽐，
学校第⼀名授予⾦奖，第⼆、三名银奖，第四、五、六名铜奖；
将该18名学⽣（可能不⾜18名）的信息按照学校排名升序、学⽣个⼈成绩降序输出到Result.txt⽂件中。
以下是两个⽂件中的信息格式
姓名 学号      学校   成绩
张1  10000101 A⼤学  99
张2  10002020 B⼤学  89
张3  10003021  C⼤学  98

Result.txt:
奖项  学校  姓名  学号      成绩
⾦奖  A⼤学 张1  10000101  99
⾦奖  A⼤学 张4  10000102  98
银奖  B⼤学 张2  10002020  89
银奖  B⼤学 张5  10002021  88
 *
 *
 *
 */

#include <stdio.h>
#include <stdlib.h>
#include <string.h>

#define N 100

typedef struct {
    char price[20], name[20];
    int rank, total;
}Schools;

typedef struct {
    char name[20];
    int num;
    Schools school;
    int grade;
}Students;

int n, schNum; // 学生信息和学校数量

void input(Students students[]){
    FILE *fp;
    if ((fp = fopen("data.txt", "r")) == NULL){
        printf("file open failed\n");
        exit(0);
    }
    for (int i = 0; i < N; i++){
        if (fscanf(fp, "%s %d %s %d", students[i].name, &students[i].num, students[i].school.name, &students[i].grade) != 4)
            break;
        n++;
    }
    fclose(fp);
}

void sort(Students students[], int p1){
    for (int i = 0; i < p1 - 1; i++){
        int k = i;
        for (int j = i + 1; j < p1; j++)
            if (students[k].grade < students[j].grade) k = j;
        if (k != i){
            Students t = students[k];
            students[k] = students[i];
            students[i] = t;
        }
    }
}

// 计算学校前三名总分
int schTotal(Schools school, Students students[]){
    Students s1[N] = {0};
    int p1 = 0;
    for (int i = 0; i < n; i++){
        if (strcmp(students[i].school.name, school.name) == 0)
            s1[p1++] = students[i];
    }
    sort(s1, p1);
    return s1[0].grade + s1[1].grade + s1[2].grade;
}

void schSort(Schools schools[]){
    for (int i = 0; i < schNum - 1; i++){
        int k = i;
        for (int j = i + 1; j < schNum; j++)
            if (schools[k].total < schools[j].total) k = j;
        if (k != i){
            Schools t = schools[k];
            schools[k] = schools[i];
            schools[i] = t;
        }
    }
}

void ranking(Students students[], Schools schools[]){
    // 统计几个学校，看看排名
    for (int i = 0; i < n; i++){
        int j;
        for (j = 0; j < schNum; j++)
            if (strcmp(students[i].school.name, schools[j].name) == 0) break;
        if (j >= schNum) strcpy(schools[schNum++].name, students[i].school.name);
    }
    for (int i = 0; i < schNum; i++)
        schools[i].total = schTotal(schools[i], students);
    // 对学校进行排序，找到金银铜奖
    schSort(schools);
    for (int i = 0; i < schNum; i++){
        char *s = "";
        if (i == 0) s = "Gold";
        else if (i == 1 || i == 2) s = "Silver";
        else s = "Copper";
        strcpy(schools[i].price, s);
        schools[i].rank = i + 1;
    }
}

void output(Students students[], Schools schools[]){
    int i, j;
    sort(students, n); // 按照学生成绩降序
    // 同步学生学校信息
    for (i = 0; i < n; i++)
        for (j = 0; j < schNum; j++)
            if (strcmp(students[i].school.name, schools[j].name) == 0)
                students[i].school = schools[j];
    // 关于学校降序
    for (i = 0; i < n - 1; i++){
        int k = i;
        for (j = i + 1; j < n; j++)
            if (students[k].school.rank > students[j].school.rank) k = j;
        if (k != i){
            Students t = students[k];
            students[k] = students[i];
            students[i] = t;
        }
    }
    FILE *fp;
    if ((fp = fopen("result.txt", "w")) == NULL){
        printf("file open failed\n");
        exit(0);
    }
    // 每个学校，找三个最高分
    for (i = 0; i < schNum; i++){
        int k;
        for (k = 0; k < n; k++)
            if (students[k].school.rank != i)
                continue;
        for (j = k; j < 3 + k; j++)
            fprintf(fp, "%s %s %s %d %d\n", students[j].school.price, students[j].school.name, students[j].name, students[j].num, students[j].grade);
    }
    fclose(fp);
}

int main(){
    Students students[N] = {0};
    Schools schools[N] = {0};
    input(students); // 输入学生信息
    ranking(students, schools); // 学校排名
    output(students, schools);
    return 0;
}







