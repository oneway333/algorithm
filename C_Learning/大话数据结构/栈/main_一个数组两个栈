#include <stdio.h>

#define MAXSIZE 1000
#define OK 1
#define ERROR 0

typedef int Status;
typedef int SElemType;

typedef struct {
    SElemType data[MAXSIZE];
    int top1, top2; // 一个数组放两个栈，top1在开头栈顶元素下标，top2在结尾栈顶元素下标
}SqDoubleStack;

// 入栈
Status Push(SqDoubleStack *S, SElemType e, int stackNumber){
    if (S->top1 + 1 >= S->top2)  return ERROR;// 如果栈已满，就不能入了，top1 + 1 = top2的时候就是满了，也就是数组满了
    if (stackNumber == 1) S->data[++S->top1] = e; // top1为栈顶元素下标，所以要先+1，再赋值
    else if (stackNumber == 2) S->data[--S->top2] = e; // 同上
    return OK;
}

// 出栈
Status Pop(SqDoubleStack *S, SElemType *e, int stackNumber){
    if (stackNumber == 1) {
        if (S->top1 <= -1) return ERROR;
        *e = S->data[S->top1--]; // 先返回栈顶元素，再--
    } else if (stackNumber == 2) {
        if (S->top2 >= MAXSIZE) return ERROR;
        *e = S->data[S->top2++]; // 同上
    }
    return OK;
}

void show(SqDoubleStack *S, int stackNumber){
    int i;
    if (stackNumber == 1) {
        for (i = 0; i <= S->top1; i++)
            printf("%d\t", S->data[i]);
    } else if (stackNumber == 2) {
        for (i = MAXSIZE - 1; i >= S->top2; i--)
            printf("%d\t", S->data[i]);
    }
}

int main(){
    SqDoubleStack S = {.top1 = -1, .top2 = MAXSIZE};
    int i, e;
    for (i = 0; i < 10; i++) Push(&S, i + 1, 1);
    for (i = 0; i < 10; i++) Push(&S, i + 2, 2);
    show(&S, 1);
    putchar('\n');
    show(&S, 1);
    putchar('\n');
    Pop(&S, &e, 1);
    show(&S, 1);
    putchar('\n');
    printf("%d\n", e);
    Pop(&S, &e, 2);
    show(&S, 2);
    putchar('\n');
    printf("%d\n", e);
    return 0;
}