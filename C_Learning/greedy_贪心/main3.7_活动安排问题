/*
3.7 活动安排问题
已知有一个会议室，现在有n个人申请使用这个会议室。给定这n个人申请的开始时间和结束时间。求出最多能有多少人可以使用到会议室。
输入：s = [2, 2, 6, 4, 4], e = [6, 3, 7, 5, 6]
输出：3
 *
 */



#include <stdio.h>
#include "string.h"
#include <stdlib.h>

#define N 500

typedef struct{
    int s;
    int e;
} Time;

// 返回数组长度
int init(int s[], char s1[]){
    int i = 0;
    while (s1[i]){
        s[i] = s1[i] - '0';
        i++;
    }
    return i;
}

int find(int e[], int en){
    int idx;
    // 将idx初始化为第一个不为-1的数
    for (int i = 0; i < en; ++i) {
        if (e[i] != -1) {
            idx = i;
            break;
        }
    }
    // 找到最早结束的e对应的下标
    for (int i = 0; i < en; ++i) {
        if (e[i] == -1) continue;
        if (e[idx] > e[i]) {
            idx = i;
        }
    }
//    e[idx] = -1;
    return idx;
}

int compare(Time time[], int s, int e, int idx){
    for (int i = 0; i < idx; ++i) {
        if (!(s < e && s >= time[i].e)) return 0;
    }
    return 1;
}

int output(int s[], int e[], int sn, int en){
    Time time[N];
    int idx = 0;
    for (int i = 0; i < en; ++i) {
        // 记录每次返回的最早结束时间对应的下标
        int tmp = find(e, en);
        // 比较第N次时间表是否满足要求
        if (idx == 0 || compare(time, s[tmp], e[tmp], idx)){
            time[idx].s = s[tmp];
            time[idx].e = e[tmp];
            idx++;
        }
        e[tmp] = -1;
    }
    // 返回符合的个数
    for (int i = 0; i < 6; ++i) {
        printf("%d %d\n", time[i].s, time[i].e);
    }
    return idx;
}

int main() {
    char s1[N] = {0}, e1[N] = {0};
    int s[N] = {0}, e[N] = {0}, sn = 0, en = 0;
    gets(s1);
    gets(e1);
    // sn, s数组的长度，en, e数组的长度
    sn = init(s, s1);
    en = init(e, e1);
    printf("%d\n", output(s, e, sn, en));
    return 0;
}