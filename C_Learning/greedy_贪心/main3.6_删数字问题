/*
3.6 删数字问题
在给定的有n个数字的数组中，删除其中k(k<n)个数字后，剩下的数字按原次序组成一个新的正整数。请确定删除方案，使得剩下的数字组成的新正整数最大。
输入：k = 6, nums = [7,6,2,1,9,1,7,5,4,6,3,9,8,2,0,4,6,3]
输出：975639820463
例如在整数762191754639820463中删除6个数字后，所能得到的最大数字是多少？
1

 *
 */


#include <stdio.h>
#include "string.h"
#include <stdlib.h>

#define N 500

// 初始化nums
int init(int nums[], char s[]){
    int i = 0;
    while (s[i]){
        nums[i] = s[i] - '0';
        i++;
    }
    return i;
}

// 改变nums，并返回新长度
int change(int nums[], int idx, int out){
    for (int i = idx; i < out - 1; ++i) {
        nums[i] = nums[i + 1];
    }
    return out - 1;
}

void maxest(int nums[], int k, int n){
    // 每次变化后，nums的长度
    int out = n;
    for (int i = 0; i < k; ++i) {
        // 每次从头开始
        for (int idx = 0; idx < out - 1; ++idx) {
            if (nums[idx + 1] > nums[idx]) {
                // 将nums[idx]剔除
                out = change(nums, idx, out);
                break;
            }
        }
    }
    for (int i = 0; i < out; ++i) {
        printf("%d", nums[i]);
    }
}

int main() {
    char s[N] = {0};
    int k, nums[N] = {0};
    scanf("%d", &k);
    scanf("%s", s);
    // nums的长度
    int n = init(nums, s);
    maxest(nums, k, n);
    return 0;
}