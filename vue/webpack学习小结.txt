webpack

1.能够理解webpack基本概念和作用
2.能够掌握webpack使用步骤
3.能够使用webpack相关配置
4.能够使用webpack开发服务器
5.能够查阅使用webpack中文文档

* webpack本身是, node的一个第三方（插件？）模块包, 用于打包代码

官网 https://webpack.docschina.org/

现代 javascript 应用程序的 静态模块打包器 (module bundler)
为要学的 vue-cli 开发环境做铺垫

* webpack能做什么
把很多文件打包整合到一起, 缩小项目体积, 提高加载速度

** less/sass -> css
** ES6/7/8 -> ES5 处理js兼容
** 支持js模块化
** 处理css兼容性
** html/css/js -> 压缩合并

* webpack的基本使用

* 创建项目


* webpack使用

** 初始化包环境
npm install

** 安装依赖包
npm install webpack webpack-cli -D

** package.json 中配置scripts(自定义命令)

"scripts": {
  "test": "echo \"Error: no test specified\" && exit 1",
  "build": "webpack"
},

** 测试一下
npm run test

** 运行打包命令
npm run build

执行打包命令后，在src并列处, 生成默认dist目录和打包后默认main.js文件,默认会打包src下的index.js


* webpack 更新打包

以后代码变更, 如何重新打包呢？

** 重新打包: npm run build

1.src下开发环境, dist是打包后, 分别独立
2.打包后格式压缩, 变量压缩等


【webpack的配置】

* webpack-入口和出口
告诉webpack从哪开始打包, 打包后输出到哪里

默认入口: ./src/index.js

默认出口: ./dist/main.js

webpack配置: webpack.config.js(默认)

1.新建src并列处, webpack.config.js

module.exports = {
   mode: '',
   entry: '',
   output: '',
   plugins: [],
   module: [],
   resolve: '',
   devServer: {}
}

2.填入配置项

const path = require("path")

module.exports = {
    entry: "./src/main.js", // 入口
    output: { 
        path: path.join(__dirname, "dist"), // 出口路径
        filename: "bundle.js" // 出口文件名
    }
}

3.修改package.json, 自定义打包命令 - 让webpack使用配置文件

重点: 所有要被打包的资源都要跟入口产生直接/间接的引用关系


* 插件-自动生成html文件

html-webpack-plugin插件, 让webpack打包后生成html文件并自动引入打包后的js

1.下载插件：
npm install html-webpack-plugin  -D

2.webpack.config.js配置

3.重新打包后观察dist下是否多出html并运行看效果
打包后的index.html自动引入打包后的js文件

4.自定义打包的html模版，和输出文件名字
plugins: [
  new HtmlWebpackPlugin({
    template: './public/index.html',
    filename: 'index.html'
  })
]


5 mode模式

mode模式分为开发阶段和发布阶段
development 开发阶段，简易打包，打包速度快
production  发布阶段，打包精细，打包速度慢（但是没关系不会经常production）


【webpack开发服务器-为何学?】

* 问题：每次修改代码, 都需要重新 npm run build 打包, 才能看到最新的效果, 实际工作中, 打包 npm run build 非常费时 (30s - 60s) 之间
为什么费时?
1.构建依赖
2.磁盘读取对应的文件到内存, 才能加载
3.将处理完的内容, 输出到磁盘指定目录

* 解决方法: 起一个开发服务器, 在电脑"内存中打包", 缓存一些已经打包过的内容, 只重新打包修改的文件, 最终运行加载在内存中给浏览器使用


【webpack-dev-server】

* 启动本地服务, 可实时更新修改的代码, 打包变化代码到内存中, 然后直接提供端口和网页访问

1.下载包

npm install webpack-dev-server -D

2.package.json中配置

"scripts": {
    "build": "webpack",
    "serve": "webpack serve"
}

3.运行命令-启动webpack开发服务器
npm run serve

以后改了src下的资源代码, 就会直接更新到内存打包, 然后反馈到浏览器上了

* webpack-dev-server配置

1.package.json
"scripts": {
  "build": "webpack",
  "serve": "webpack serve --port 8083 --open"
},


2.在webpack.config.js中添加服务器配置

module.exports = {
    // ...其他配置
    devServer: {
      port: 3000, // 端口号
      open: true
    }
}


// "serve": "webpack serve --port 8080 --open"


【加载器 - 处理css文件问题】

自己准备css文件, 引入到webpack入口, 测试webpack是否能打包css文件

1.新建 - src/styles/index.css

2.编写样式

3.(重要) 一定要引入到入口才会被webpack打包

4.执行打包命令观察效果

总结: 保存原因, 因为webpack默认只能处理js类型文件


【加载器 - 处理css文件】

loaders加载器, 可让webpack处理其他类型的文件, 打包到js中

1.安装依赖
npm install style-loader css-loader -D

万物皆模块, 引到入口, 才会被webpack打包, css打包进js中, 然后被嵌入在style标签插入dom上




















